require('dotenv').config();
const mongoose = require('mongoose');

// Conectar diretamente ao MongoDB
async function checkUsers() {
  try {
    console.log('üîç Verificando usu√°rios no banco de dados...\n');

    await mongoose.connect(process.env.MONGO_URI);
    console.log('‚úÖ Conectado ao MongoDB');

    const db = mongoose.connection.db;
    const collection = db.collection('users');

    // Buscar todos os usu√°rios
    const users = await collection.find({}, {
      projection: { name: 1, email: 1, role: 1, provider: 1, createdAt: 1 }
    }).toArray();

    console.log(`üë• Total de usu√°rios encontrados: ${users.length}\n`);

    if (users.length === 0) {
      console.log('‚ö†Ô∏è NENHUM USU√ÅRIO ENCONTRADO!');
      console.log('üí° Voc√™ precisa criar um usu√°rio admin primeiro.');
      return;
    }

    // Mostrar usu√°rios
    console.log('üìã USU√ÅRIOS NO SISTEMA:');
    console.log('='.repeat(60));

    users.forEach((user, index) => {
      console.log(`${index + 1}. üë§ Nome: ${user.name || 'N√£o definido'}`);
      console.log(`   üìß Email: ${user.email || 'N√£o definido'}`);
      console.log(`   üîí Role: ${user.role || 'USER'}`);
      console.log(`   üè† Provider: ${user.provider || 'local'}`);
      console.log(`   üìÖ Criado em: ${user.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'N√£o definido'}`);
      console.log('-'.repeat(40));
    });

    // Contagem por role
    const admins = users.filter(u => u.role === 'ADMIN');
    console.log(`\nüìä ESTAT√çSTICAS:`);
    console.log(`üë®‚Äçüíº Administradores: ${admins.length}`);
    console.log(`üë• Usu√°rios normais: ${users.length - admins.length}`);

    if (admins.length === 0) {
      console.log('\n‚ùå ALERTA: Nenhum usu√°rio com role ADMIN encontrado!');
      console.log('üí° Voc√™ precisa promover um usu√°rio para ADMIN ou criar um novo.');
    }

    // Sugest√µes
    console.log('\nüí° PR√ìXIMOS PASSOS:');

    if (admins.length === 0 && users.length > 0) {
      const user = users[0];
      console.log(`1. Para usar ${user.email}, voc√™ pode:`);
      console.log(`   - Definir uma senha padr√£o`);
      console.log(`   - Ou fazer login como este usu√°rio e promover para ADMIN`);
    }

    await mongoose.disconnect();
    console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!');

  } catch (error) {
    console.error('‚ùå ERRO ao verificar usu√°rios:', error.message);
  }
}

checkUsers();
